---
import { fetchPackageMeta, fetchTypeDefinitions } from '../../lib/api'
import { getTypeDefFiles, collectDeclarations } from '../../lib/types'
import BaseLayout from '../../layouts/BaseLayout.astro'
import DeclarationRenderer from '../../components/DeclarationRenderer'
import typescript from 'highlight.js/lib/languages/typescript'
import hljs from 'highlight.js/lib/core'
import 'highlight.js/styles/nord.css'
import CodeGroup from '../../components/CodeGroup'

hljs.registerLanguage('typescript', typescript)

const pkgName = Astro.params.pkgName
const pkgMeta = await fetchPackageMeta(pkgName)
const typeDefs = await fetchTypeDefinitions(
  pkgName,
  pkgMeta.types || 'dist/index.d.ts'
)

const typeFiles = await getTypeDefFiles(typeDefs, pkgName)

const grouped = {}

for (let file of typeFiles) {
  const declarations = await collectDeclarations(file.sourceFile)
  declarations.forEach(nodeCodeToHTML, {
    highlighter: code => hljs.highlight(code, { language: 'typescript' }).value,
  })
  const declarationsByKind = declarations.reduce((acc, item) => {
    ;(acc[item.type.label] || (acc[item.type.label] = []),
    acc[item.type.label]).push(item)

    return acc
  }, {})

  grouped[file.name] = {
    declarations: declarations,
    byKind: declarationsByKind,
    all: hljs.highlight(file.typeDefs, { language: 'typescript' }).value,
  }
}

function nodeCodeToHTML(node, index, src) {
  src[index].code = this.highlighter(node.code)
}
---

<BaseLayout>
  <div class="flex items-end gap-2 mb-4">
    <h1 class="font-title text-zinc-200 text-2xl">
      <span class="text-zinc-600"
        ><a class="hover:text-zinc-50" href="/">~</a> /</span
      >
      {pkgName}
    </h1>
    <p>
      <small class="text-xs">
        {pkgMeta.version}
      </small>
    </p>
  </div>
  {
    Object.keys(grouped).map(x => {
      const fileDef = grouped[x]
      const byKind = fileDef.byKind
      const all = fileDef.all
      return (
        <div class="py-2 mt-2">
          <div class="border rounded border-zinc-700 p-2">
            <p>{x}</p>
          </div>
          <DeclarationRenderer data={byKind} />
          <CodeGroup name="All">
            <pre
              class={`ml-2 p-4 select-all whitespace-pre-wrap`}
              set:html={all}
            />
          </CodeGroup>
        </div>
      )
    })
  }
</BaseLayout>
