---
import { fetchPackageMeta, fetchTypeDefinitions } from '../../lib/api'
import { recents } from '@/lib/recent'
import {
  getTypeDefFiles,
  collectDeclarations,
  findAllTypeFiles,
} from '../../lib/types'
import BaseLayout from '../../layouts/BaseLayout.astro'
import DeclarationRenderer from '../../components/DeclarationRenderer'
import typescript from 'highlight.js/lib/languages/typescript'
import hljs from 'highlight.js/lib/core'
import 'highlight.js/styles/nord.css'
import CodeGroup from '../../components/CodeGroup'
import { PackageDetails } from '../../components/PackageDetails'
import { FileTree } from '../../components/FileTree'
import { join } from 'node:path'

hljs.registerLanguage('typescript', typescript)

const pkgName = Astro.params.pkgName
const pkgMeta = await fetchPackageMeta(pkgName)
await recents.add(pkgName)

let typeDefFiles = []

if (pkgMeta.types) {
  typeDefFiles.push(pkgMeta.types)
}

if (pkgMeta.exports) {
  const otherTypeDefs = findAllTypeFiles(pkgMeta.exports)
  typeDefFiles.push(...otherTypeDefs)
}

if (typeDefFiles.length == 0) {
  typeDefFiles.push('dist/index.d.ts')
}

const typeFiles = []

await Promise.all(
  typeDefFiles.map(async fileDef => {
    const isGlob = /[\[\]\{\}\*]/.test(fileDef)
    if (isGlob) return
    const definitions = await fetchTypeDefinitions(pkgName, fileDef)
    const _typeFiles = await getTypeDefFiles(definitions, pkgName)
    _typeFiles[0].name = fileDef
    typeFiles.push(..._typeFiles)
  })
)

const grouped = {}

for (let file of typeFiles) {
  const declarations = await collectDeclarations(file.sourceFile)
  declarations.forEach(nodeCodeToHTML, {
    highlighter: code => hljs.highlight(code, { language: 'typescript' }).value,
  })
  const declarationsByKind = declarations.reduce((acc, item) => {
    ;(acc[item.type.label] || (acc[item.type.label] = []),
    acc[item.type.label]).push(item)

    return acc
  }, {})

  grouped[join(file.name)] = {
    declarations: declarations,
    byKind: declarationsByKind,
    all: hljs.highlight(file.typeDefs, { language: 'typescript' }).value,
  }
}

function nodeCodeToHTML(node, index, src) {
  src[index].code = this.highlighter(node.code)
}

const uniqFiles = []

typeFiles.reduce((acc, item) => {
  if (acc.has(item.name)) {
    return acc
  }
  acc.add(item.name)
  uniqFiles.push(item)
  return acc
}, new Set())
---

<BaseLayout>
  <div class="my-20">
    <div
      class="max-w-shell mx-auto grid grid-cols-1 md:grid-cols-[minmax(240px,auto),1fr] gap-6 items-start"
    >
      <div class="sticky top-0 py-1 rounded-md md:min-h-screen bg-zinc-950">
        <PackageDetails name={pkgName} version={pkgMeta.version} />
        <div class="md:min-h-[80vh] md:max-h-[80vh] max-w-full overflow-auto">
          <FileTree files={uniqFiles} />
        </div>
      </div>
      <div>
        {
          Object.keys(grouped).map(x => {
            const fileDef = grouped[x]
            const byKind = fileDef.byKind
            const all = fileDef.all

            return (
              <div class="overflow-hidden mb-2 border rounded">
                <p id={x} class="text-center p-1.5">
                  <a href={`#${x}`}>{x}</a>
                </p>
                <DeclarationRenderer data={byKind} />
                <CodeGroup name="All">
                  <pre
                    class={`ml-2 p-4 select-all whitespace-pre-wrap`}
                    set:html={all}
                  />
                </CodeGroup>
              </div>
            )
          })
        }
      </div>
    </div>
  </div>
</BaseLayout>
